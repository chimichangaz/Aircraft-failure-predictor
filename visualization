import matplotlib.pyplot as plt
import seaborn as sns


def plot_sensor_trends(train_data, engine_id):
   
    engine_data = train_data[train_data['engine_id'] == engine_id]

    plt.figure(figsize=(12, 8))
    for sensor in [f'sensor_{i}' for i in range(1, 6)]:  # Example: plotting first 5 sensors
        plt.plot(engine_data['cycle'], engine_data[sensor], label=sensor)

    plt.title(f"Sensor Trends for Engine {engine_id}")
    plt.xlabel("Cycle")
    plt.ylabel("Sensor Readings")
    plt.legend()
    plt.grid()
    plt.show()


def plot_rul_distribution(train_data):
    """
    Plot the distribution of Remaining Useful Life (RUL) in the training dataset.

    Parameters:
        train_data (DataFrame): Processed training dataset with RUL calculated.
    """
    plt.figure(figsize=(8, 6))
    sns.histplot(train_data['RUL'], bins=30, kde=True, color='blue')
    plt.title("Distribution of Remaining Useful Life (RUL)")
    plt.xlabel("RUL")
    plt.ylabel("Frequency")
    plt.grid()
    plt.show()


def plot_feature_importance(model, X_train):
  
    if hasattr(model, 'feature_importances_'):
        feature_importance = model.feature_importances_

        # Plot feature importance
        plt.figure(figsize=(12, 6))
        plt.bar(X_train.columns, feature_importance, color='teal')
        plt.xticks(rotation=90)
        plt.title("Feature Importance from Random Forest")
        plt.ylabel("Importance")
        plt.grid()
        plt.show()
    else:
        print("The provided model does not have feature importances.")


def plot_true_vs_predicted(y_test, y_pred):
    
    plt.figure(figsize=(8, 6))
    plt.scatter(y_test, y_pred, alpha=0.6, color='blue')
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red', linestyle='--')
    plt.title("True vs Predicted RUL")
    plt.xlabel("True RUL")
    plt.ylabel("Predicted RUL")
    plt.grid()
    plt.show()
